{"version":3,"sources":["components/Rubriker.js","components/Form.js","components/Vader.js","App.js","serviceWorker.js","index.js"],"names":["Rubriker","React","Component","Form","onSubmit","this","props","getVader","type","name","placeholder","Vader","city","country","temperature","humidity","wind","description","error","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","speed","weather","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAYeA,E,iLARP,OACI,6BACI,gD,GAJOC,IAAMC,WCYdC,E,iLAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,UACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,SAC9C,kD,GANGT,IAAMC,WCeVS,E,iLAbP,OACI,6BACMN,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,qCAAYR,KAAKC,MAAMM,KAAvB,KAAiCP,KAAKC,MAAMO,SACrFR,KAAKC,MAAMQ,aAAe,0CAAiBT,KAAKC,MAAMQ,YAA5B,WAC1BT,KAAKC,MAAMS,UAAa,6CAAoBV,KAAKC,MAAMS,UACvDV,KAAKC,MAAMU,MAAS,0CAAiBX,KAAKC,MAAMU,KAA5B,QACpBX,KAAKC,MAAMW,aAAe,yCAAaZ,KAAKC,MAAMW,aAClDZ,KAAKC,MAAMY,OAAS,2BAAKb,KAAKC,MAAMY,Y,GATlCjB,IAAMC,WCGpBiB,EAAU,mCAsEDC,E,2MAnEbC,MAAQ,CACNP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,UAAMM,EACNL,iBAAaK,EACbJ,WAAOI,G,EAETf,SAAW,SAAOgB,GAAP,qBAAAC,EAAAC,OAAA,uDACTF,EAAEG,iBACId,EAAOW,EAAEI,OAAOC,SAAShB,KAAKiB,MAC9BhB,EAAUU,EAAEI,OAAOC,SAASf,QAAQgB,MAHjC,WAAAL,EAAA,MAIcM,MAAM,qDAAD,OAAsDlB,EAAtD,YAA8DC,EAA9D,+BAA4FM,KAJ/G,cAIHY,EAJG,kBAAAP,EAAA,MAKUO,EAASC,QALnB,OAKHC,EALG,OAMLrB,GAAQC,GACZqB,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVtB,YAAamB,EAAKI,KAAKC,KACvB1B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKM,IAAI1B,QAClBE,SAAUkB,EAAKI,KAAKtB,SACpBC,KAAMiB,EAAKjB,KAAKwB,MAChBvB,YAAagB,EAAKQ,QAAQ,GAAGxB,YAC7BC,MAAO,MAGX,EAAKkB,SAAS,CACZtB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVN,UAAMM,EACNL,iBAAaK,EACbJ,MAAO,iDAzBA,uC,wEA8BT,OACE,6BACE,yBAAKwB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aACf,kBAAC,EAAD,OAEC,yBAAKA,UAAU,QACZ,kBAAC,EAAD,CAAMnC,SAAYF,KAAKE,WACvB,kBAAC,EAAD,CACAO,YAAaT,KAAKgB,MAAMP,YACxBF,KAAMP,KAAKgB,MAAMT,KACjBC,QAASR,KAAKgB,MAAMR,QACpBE,SAAUV,KAAKgB,MAAMN,SACrBC,KAAMX,KAAKgB,MAAML,KACjBC,YAAaZ,KAAKgB,MAAMJ,YACxBC,MAAOb,KAAKgB,MAAMH,iB,GAzDlBjB,IAAMC,WCKJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.133edc4f.chunk.js","sourcesContent":["import React from \"react\"; \n\nclass Rubriker extends React.Component {\n    render() {\n        return(\n            <div> \n                <h1> SMHI-Appen</h1>\n            </div>\n        );\n    }\n}; \n\nexport default Rubriker; ","import React from \"react\"; \n\nclass Form extends React.Component {\n    render(){\n        return(\n            <form onSubmit={this.props.getVader}> \n                <input type=\"text\" name=\"city\" placeholder=\"Stad\"/> \n                <input type=\"text\" name=\"country\" placeholder=\"Land\"/> \n                <button> Sök  </button>\n            </form>\n        );\n    }\n};\n\nexport default Form;","import React from \"react\"; \n\nclass Vader extends React.Component {\n    render(){\n        return(\n            <div> \n                { this.props.city && this.props.country && <p>Plats: { this.props.city }, { this.props.country }</p>  }\n                { this.props.temperature && <p>Temperatur: { this.props.temperature } grader</p> }\n                { this.props.humidity &&  <p>Luftfuktighet: { this.props.humidity }</p> }\n                { this.props.wind &&  <p>Vindstyrka: { this.props.wind } m/s</p> }\n                { this.props.description && <p>Övrigt: { this.props.description }</p> }\n                { this.props.error && <p>{ this.props.error }</p> }\n            </div>\n        );\n    }\n}; \n\nexport default Vader;","import React from \"react\"; \nimport Rubriker from \"./components/Rubriker\"; \nimport Form from \"./components/Form\"; \nimport Vader from \"./components/Vader\"; \n\nconst API_KEY = \"4bf22668c40392c72e5bade2b1b515a7\"; \n\nclass App extends React.Component {\n  state = {\n    temperature: undefined, \n    city: undefined, \n    country: undefined, \n    humidity: undefined, \n    wind: undefined, \n    description: undefined, \n    error: undefined\n  }\n  getVader = async (e) => {\n    e.preventDefault(); \n    const city = e.target.elements.city.value; \n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${API_KEY}`);\n    const data = await api_call.json(); \n    if (city && country) {\n    console.log(data); \n    this.setState({\n        temperature: data.main.temp,\n        city: data.name, \n        country: data.sys.country, \n        humidity: data.main.humidity,\n        wind: data.wind.speed,\n        description: data.weather[0].description, \n        error: \"\"\n    }); \n  } else {\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined, \n      wind: undefined, \n      description: undefined, \n      error: \"Opps! Skriv in stad och land på engelska!\"\n    });\n  }\n}\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\"> \n          <div className=\"main\">\n            <div className=\"containerBox\">\n              <div className=\"titleNamn\">\n              <Rubriker />\n              </div>\n               <div className=\"form\">\n                  <Form getVader = {this.getVader}/>\n                  <Vader \n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  wind={this.state.wind}\n                  description={this.state.description}\n                  error={this.state.error}\n                  /> \n               </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}